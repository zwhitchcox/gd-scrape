{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["gathered","parseTimeFrom","memoize","timeStr","hoursMatch","match","hours","parseInt","minutesMatch","minutes","daysMatch","days","startPatterns","INITIAL_CONSONANT_DIGRAPHS","FINAL_CONSONANT_DIGRAPHS","patternMatch","str","pattern","replace","patI","strI","length","letter","pat","digraph","substr","includes","isConsonant","isVowel","test","Number","minute","hour","day","checkExpired","domain","_gathered","timeLeft","expires","Date","now","getTimeLeft","left","abs","Math","hoursLeft","minutesLeft","daysLeft","App","useState","priceLimit","setPriceLimit","newPattern","setNewPattern","patterns","setPatterns","showPatternsExplanation","setShowPatternsExplanation","domains","setDomains","useEffect","a","fetch","resp","json","filtered","filter","name","price","filterPatterns","Object","entries","key","push","some","priceArr","split","result","join","priceToNumber","className","value","onChange","e","isNaN","target","onClick","map","type","checked","window","WebSocket","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.caf55535.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport memoize from 'lodash/memoize'\nimport './App.scss';\n\nconst gathered = 1613967115931\n\nconst parseTimeFrom = memoize((timeStr: string) => {\n  const hoursMatch = timeStr.match(/(\\d)+H/)\n  const hours = (hoursMatch && parseInt(hoursMatch[1])) || 0\n  const minutesMatch = timeStr.match(/(\\d)+M/)\n  const minutes = (minutesMatch && parseInt(minutesMatch[1])) || 0\n  const daysMatch = timeStr.match(/(\\d)+D/)\n  const days = (daysMatch && parseInt(daysMatch[1])) || 0\n  return {\n    hours: hours,\n    minutes: minutes,\n    days: days,\n  }\n})\n\nconst VOWEL_SYMBOL = '_'\nconst CONSONANT_SYMBOL = '$'\nconst startPatterns = {\n  '_$_$': false,\n  '$_$_': true,\n  '$__$': false,\n  '$_0_': false,\n  '$_$2_': false,\n  '$_$$_': false,\n  '$_11$': false,\n  '$__$_': false,\n  '$o1$': false,\n  '$e1$': false,\n}\nconst INITIAL_CONSONANT_DIGRAPHS = [\n  'bl',\n  'br',\n  'ch',\n  'cl',\n  'cr',\n  'dr',\n  'fl',\n  'fr',\n  'gl',\n  'gr',\n  'ph',\n  'pl',\n  'pr',\n  'qu',\n  'sc',\n  'sh',\n  'sl',\n  'sm',\n  'sn',\n  'sp',\n  'st',\n  'sw',\n  'th',\n  'tr',\n  'tw',\n  'wh',\n  'wr',\n]\n\nconst FINAL_CONSONANT_DIGRAPHS = [\n  'ch',\n  'ck',\n  'gh',\n  'lt',\n  'st',\n  'th',\n  'sk',\n  'sh',\n  'sm',\n  'sp',\n  'ph',\n  'ng',\n]\n\nconst patternMatch = memoize((str: string, pattern: string) => {\n  // if (str.replace('.com', '').length !== pattern.length) {\n  //   return false\n  // }\n  str = str.replace('.com', '')\n  for (let patI = 0, strI = 0; strI < str.length; strI++, patI++) {\n    if (patI > pattern.length) {\n      return false\n    }\n    const letter = str[strI]\n    const pat = pattern[patI]\n    if (pat === CONSONANT_SYMBOL) {\n      if (strI === 0) {\n        const digraph = str.substr(strI, 2)\n        if (INITIAL_CONSONANT_DIGRAPHS.includes(digraph)) {\n          strI++\n          continue\n        }\n      } else {\n        const digraph = str.substr(strI, 2)\n        if (FINAL_CONSONANT_DIGRAPHS.includes(digraph)) {\n          strI++\n          continue\n        }\n      }\n    }\n    if (pat === '*') {\n      continue\n    }\n    if (pat === CONSONANT_SYMBOL) {\n      if (!isConsonant(letter)) {\n        return false\n      }\n    } else if (pat === VOWEL_SYMBOL) {\n      if (!isVowel(letter)) {\n        return false\n      }\n    } else if (/[0-9]/.test(pat)) {\n      if (letter !== str[Number(pat)]) {\n        return false\n      }\n    } else if (letter !== pat) {\n      return false\n    }\n  }\n  return true\n})\n\nconst minute = 60 * 1000\nconst hour = 60 * minute\nconst day = 24 * hour\nconst checkExpired = memoize((domain) => {\n  const _gathered = domain.gathered || gathered\n  const {hours, minutes, days}  = parseTimeFrom(domain.timeLeft)\n  const expires = _gathered + days*day + hours*hour + minutes*minute\n  return Date.now() > expires\n})\n\nconst getTimeLeft = memoize(domain => {\n  const _gathered = domain.gathered || gathered\n  const {hours, minutes, days}  = parseTimeFrom(domain.timeLeft)\n  const expires = _gathered + days*day + hours*hour + minutes*minute\n  const left = Date.now() - expires\n  const { abs } = Math\n  const hoursLeft = abs((left % day) / hour | 0)\n  const minutesLeft = abs((left % hour) / minute | 0)\n  const daysLeft = abs((left / day | 0))\n  return {\n    hoursLeft,\n    minutesLeft,\n    daysLeft,\n  }\n})\n\n\nconst isVowel = (letter:string) => (\n  letter.length === 1 && ['a','e','i','o','u','y'].includes(letter)\n)\nconst isConsonant = (letter:string) => !isVowel(letter)\nconst priceToNumber = (price:string) => {\n  const priceArr = price.split('')\n  const result:any = []\n  for (const letter of priceArr) {\n    if (/[0-9]/.test(letter)) {\n      result.push(letter)\n    }\n  }\n  return Number(result.join(''))\n}\nfunction App() {\n  const [priceLimit, setPriceLimit] = useState(10000)\n  const [newPattern, setNewPattern] = useState(\"\")\n  const [patterns, setPatterns] = useState(startPatterns)\n  const [showPatternsExplanation, setShowPatternsExplanation] = useState(false)\n  const [domains, setDomains] = useState<{\n    name: string\n    price: string\n    timeLeft: string\n  }[]>([])\n  useEffect(() => {\n    ;(async() => {\n      const resp = await fetch('/gd-scrape/domains.json')\n      const domains = await resp.json()\n      setDomains(domains)\n    })()\n  }, [])\n  const filtered = domains.filter(domain => {\n    const { name, price } = domain\n    const filterPatterns: string[] = []\n    for (const [key, value] of Object.entries(patterns)) {\n      if (value) {\n        filterPatterns.push(key)\n      }\n    }\n    return filterPatterns.some(pattern => patternMatch(name, pattern))\n      && priceToNumber(price) < Number(priceLimit)\n      && !checkExpired(domain)\n  })\n\n  return (\n    <div className=\"App\">\n      <label className=\"price-limit\">\n        price limit: <input\n          value={priceLimit}\n          onChange={(e:any) => {\n            if(!Number.isNaN(Number(e.target.value)))\n              setPriceLimit(e.target.value)\n          }}\n          />\n      </label>\n      <label className=\"new-pattern\">\n        new pattern: <input\n          value={newPattern}\n          onChange={(e:any) => {\n              setNewPattern(e.target.value)\n          }}\n          />\n      </label>\n      <div className=\"btns\">\n        <button className=\"add-new-pattern\" onClick={() => {\n          setPatterns({\n            ...patterns,\n            [newPattern]: true\n          })\n          setNewPattern(\"\")\n        }}>\n          Add Pattern\n        </button>\n        <button\n          className=\"explanation\"\n          onClick={() => {\n            setShowPatternsExplanation(!showPatternsExplanation)\n          }}>\n          How Patterns Work\n        </button>\n      </div>\n      {!showPatternsExplanation ? \"\" : (\n        <div>\n          <p>\n            A '$' represents a consonant. This includes consonant digraphs (th, st, etc.)\n          </p>\n          <p>\n            A '_' represents a vowel.\n          </p>\n          <p>\n            Any letter represents itself.\n          </p>\n          <p>\n            A number represents the 0-indexed character in the string. So, for a domain that's all the same letter, I would make the pattern '$000', that's consonant, then the same consonant, then the same consonant, then the same consonant, e.g. cccc.\n          </p>\n          <p>\n            A '*' can represent any character.\n          </p>\n        </div>\n      )}\n      <div className=\"patterns\">\n        {Object.entries(patterns).map(([key, value]) => {\n          return (\n            <label onClick={() => {\n              setPatterns({\n                ...patterns,\n                [key]: !value\n              })\n            }}>\n              <input type=\"checkbox\" checked={value} />\n              {key}\n            </label>\n          )\n        })}\n      </div>\n      <table>\n        <tbody>\n        {filtered.map(domain => {\n          const timeLeft = getTimeLeft(domain)\n          const { daysLeft, minutesLeft, hoursLeft } = timeLeft\n          return (\n            <tr>\n              <td>{domain.name}</td>\n              <td>{domain.price}</td>\n              <td>\n                {daysLeft ? `${daysLeft}D ` : \"\"}\n                {hoursLeft ? `${hoursLeft}H ` : \"\"}\n                {minutesLeft ? `${minutesLeft}M ` : \"\"}\n              </td>\n            </tr>\n          )\n        })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n\n(window as any).WebSocket = undefined","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}